[{"content":"\n## Display the current environment setup information\n\nThe `doctor` command can help determine what the current developer environment has available to support the various Moddable device targets and tooling.\n\n```\nxs-dev doctor\n```\n\nThis should output something like this:\n\n```\nxs-dev environment info:\n  CLI Version                0.19.3\n  OS                         Darwin\n  Arch                       arm64\n  NodeJS Version             v16.14.0 (/path/to/node)\n  Python Version             3.10.9 (/path/to/python)\n  Moddable SDK Version       3.5.0 (/path/to/moddable)\n  Supported target devices   mac, esp32, esp8266, pico\n  ESP32 IDF Directory        /path/to/esp32/esp-idf\n  ESP8266 Base Directory     /path/to/esp\n  Pico SDK Directory         /path/to/pico/pico-sdk\n\nIf this is related to an error when using the CLI, please create an issue at \"https://github.com/hipsterbrown/xs-dev/issues/new\" with the above info.\n```\n\n**Aliases**\n\n```\nxs-dev dr\n```\nOR\n\n```\nxs-dev info\n```\n","url":"/en/features/doctor","title":"Doctor","description":"Display the current environment setup information, including valid target devices","layout":"../../../layouts/MainLayout.astro"},{"content":"\n# Manage modules from Moddable\n\nThe Moddable SDK ships with many first-party modules to support various features, peripherals, sensors, etc. The `include` command will update the project `manifest.json` with the selected module:\n\n```\nxs-dev include network/wifi\n```\n\nOr select from available modules:\n\n```\nxs-dev include\nxs-dev include files\n```\n\n## Select a device\n\nWhen the `--device` flag is present, the module is added to the `platforms` section of the `manifest.json` for the specified device. When `device` is not provided, the module is added to the global manifest section to be used for all devices. For example, the following adds the module for use on `esp32` devices only:\n\n```\nxs-dev include files/flash --device esp32\n```\n\n## Remove a module\n\nUpdates the `manifest.json` to remove the module.\n\n```\nxs-dev remove network/wifi\n```\n\nOr remove all modules that contain a string. This removes all modules that contain `\"wifi\"`.\n\n```\nxs-dev remove wifi\n```\n\nThe `--device` flag works for the `remove` command as well:\n\n```\nxs-dev remove network/mqtt --device esp32\n```\n","url":"/en/features/include","title":"Include","description":"Manage modules from Moddable SDK","layout":"../../../layouts/MainLayout.astro"},{"content":"\n# Scaffold new Moddable projects\n\nThe default template creates a `main.js` and minimally configured `manifest.json` for running in the simulator.\n\n```\nxs-dev init my-project\n```\n\n## TypeScript\n\nThe `--typescript` flag will create a project with Moddable types and a `main.ts` to get started:\n\n```\nxs-dev init my-typed-project --typescript\n```\n\n## IO (ECMA 419)\n\nThe `--io` flag sets up the project to use the [TC53 IO manifest](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/io/io.md) in the generated `mainfest.json`:\n\n```\nxs-dev init my-io-project --io\n```\n\n## asyncMain\n\nThe `--asyncMain` flag will enable top level await in your project's entry file. In XS, TLA is only be available in imported modules by default.\n\n```\nxs-dev init my-io-project --asyncMain\n```\n\n## Moddable example\n\nFor the `--example` flag, it can be used as a boolean to select a project from the list of available [Moddable examples](https://github.com/Moddable-OpenSource/moddable/tree/public/examples):\n\n```\nxs-dev init my-example-project --example\n```\n\nOr select from a filtered list of projects:\n\n```\nxs-dev init my-http-project --example http\n```\n\nOr if the complete example name is passed, it will be selected by default:\n\n```\nxs-dev init my-mqtt-project --example network/mqtt/mqttbasic\n```\n\n## Overwrite\n\nAn existing directory matching the project name can be overwritten with the `--overwrite` flag:\n\n```\nxs-dev init my-existing-project --overwrite\n```\n","url":"/en/features/init","title":"Init","description":"Scaffold new Moddable projects","layout":"../../../layouts/MainLayout.astro"},{"content":"\n## Running Projects\n\nWithin a project directory, the `run` command will invoke [`mcconfig`](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/tools/tools.md#mcconfig) to generate the `make` file based on the `manifest.json` followed by building and running the project in the current environment simulator:\n\n```\nxs-dev run\n```\n\nWhen not in the project directory, a path can be passed to `run`:\n\n```\nxs-dev run path/to/project\n```\n\n## Moddable examples\n\nUse the `--example` flag to run a project included with the Moddable SDK:\n\n```\nxs-dev run --example helloworld\n```\n\nThe `--list-examples` provides a searchable list of available example projects:\n\n```\nxs-dev run --list-examples\n```\n\n## Select a device target\n\nThe `--device` flag allows for selecting a supported [device or simulator target](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/tools/tools.md#arguments):\n\n```\nxs-dev run --device esp32\n```\n\nTo dynamically select the device, use the `--list-devices` flag:\n\n```\nxs-dev run --list-devices\n```\n\nThis can be used in tandem with the `--example` or `--list-examples` flags to run an example project on a connected device:\n\n```\nxs-dev run --list-devices --list-examples\n```\n\n## Select a port address\n\nThe `--port` flag accepts a path to port for connected device (defaults to: `UPLOAD_PORT` environment variable):\n\n```\nxs-dev run --port /dev/cu.usbserial-0001 --device esp8266\n```\n\n_This value can be discovered using the [`scan`](./scan) command._\n\n## Display debugger output in the terminal\n\nUse the `--log` flag to display debug output in the terminal instead of opening the xsbug app:\n\n```\nxs-dev run --log\n```\n\nThis will still open the \"mcsim\" simulator app when running locally.\n\n\n## Set `mc/config` arguments\n\nUse the `--config` flag to provide [config arguments](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/tools/tools.md#arguments) to the `mc/config` module. This mechanism is often used to configure Wi-Fi credentials when running on a device:\n\n```\nxs-dev run --example network/http/httpgetjson --device esp32 --config.ssid=mySSID --config.password=\"a secret\"\n```\n\n## Building projects for release\n\nWithin a project directory, the `build` command takes the same flags as the `run` command to invoke [`mcconfig`](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/tools/tools.md#mcconfig) to generate the `make` file based on the `manifest.json` followed by only building the project for [the target device](#select-a-device-target):\n\n```\nxs-dev build --device esp32\n```\n\nThe build `--mode` can be set to `production` for the optimized release code or `development` for the debug-enabled release code. This will default to the `NODE_ENV` environment variable or `development` if that variable is not set.\n\n```\nxs-dev build --mode production --device esp32\n```\n\nThe output directory can also be set using the `--output` flag, overriding the default path of `$MODDABLE/build`, where `$MODDABLE` is the location of the Moddable tooling repo on your local filesystem.\n\n```\nxs-dev build --output ./dist --device esp32\n```\n\nIf you want to immediately deploy the release build, use the `--deploy` flag:\n\n```\nxs-dev build --deploy --device esp32\n```\n","url":"/en/features/run","title":"Build and Run","description":"Build and run Moddable projects or examples","layout":"../../../layouts/MainLayout.astro"},{"content":"\n# Discovery available devices\n\nThis command will use the [`esptool.py`](https://github.com/espressif/esptool) and/or [`picotool`](https://github.com/raspberrypi/picotool) command line tools to find available device targets connected over USB to the local dev environment.\n\n```\nxs-dev scan\n```\n\nThis will provide info with the port address, device name, and discovered features:\n\n```\n✔ Found the following available devices!\n  Port                         Device                      Features\n  /dev/cu.usbserial-0001       ESP8266EX                   WiFi\n  /dev/cu.usbserial-DN02N5XK   ESP32-D0WDQ6 (revision 0)   WiFi, BT, Dual Core, Coding Scheme None\n```\n\nThe port can be used with the [`run`](./run) command to specify a device, if multiple are connected:\n\n```\nxs-dev run --port /dev/cu.usbserial-0001 --device esp8266\n```\n","url":"/en/features/scan","title":"Scan","description":"Discover connected device targets","layout":"../../../layouts/MainLayout.astro"},{"content":"\n# Moddable Platform Setup\n\nThis command downloads the [Moddable developer tooling](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/tools/tools.md) for the current OS (Windows support coming soon).\n\n[After installing the CLI](/en/introduction#installation), call the `setup` command:\n\n```\nxs-dev setup\n```\n\nThis process mostly automates the instructions provided by [Moddable's \"Getting Started\" documentation](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/Moddable%20SDK%20-%20Getting%20Started.md) with a few exceptions.\n\n**On macOS:**\n\n[Homebrew](https://brew.sh/) is assumed to be installed.\n\nThe [Xcode Command Line tools](https://developer.apple.com/xcode/) are required; `setup` will check for their existence before continuing.\n\nA symlink for [`xsbug.app`](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/xs/xsbug.md) is created in `/Applications` for easy access through Launchpad.\n\n**On Unix environments:**\n\nThe [`moddable` git repo](https://github.com/Moddable-OpenSource/moddable) is cloned into `~/.local/share` instead of a new/existing `~/Projects` directory.\n\n**Environment config:**\n\nThis command will create (and update) an environment configuration file called `~/.local/share/xs-dev-export.sh` (on Mac & Linux) or `Moddable.bat` (on Windows). This file will be placed in the shell setup file (`.profile`, `.zshrc`, `.bashrc`, etc on Mac & Linux) or the custom command prompt (on Windows), to set environment variables and call other \"exports\" files for embedded tooling.\n\n## Target Branch\n\nThe default behavior of this command for Moddable developer tooling pulls the [latest release tooling](https://github.com/Moddable-OpenSource/moddable/releases) and source code for the associated tagged branch. This provides a known-working state for the SDK and avoids needing to build the tooling on the local machine. \n\nTo override this behavior, use the `--target-branch` flag to select `public`; this fetches the latest commit off that main branch and runs the build to generate the associated tools. This can be set to any branch name, however `public` is the main public branch for the Moddable-OpenSource repo.\n\n```\nxs-dev setup --target-branch public\n```\n\nWhen combined with the `--source-repo` flag, it's possible to get the SDK repo from another source instead of the default GitHub repo.\n\n```\nxs-dev setup --source-repo https://my-sdk.moddable-git.not-real --target-branch main\n```\n\n_This will only work for the `mac`, `windows`, and `linux` device options, which are the respective defaults for the operating system on which the command is run._\n\n## Device Setup\n\nWhile the `setup` command provides the Moddable SDK for the dev environment, the `--device` flag selects another platform target SDK to set up. It ensures the Moddable SDK has been installed first.\n\n```\nxs-dev setup --device esp32\n```\n\nUse the `--list-devices` flag to get a prompt for supported device tooling to install.\n\n```\nxs-dev setup --list-devices\n```\n\n## Additional related tooling\n\nThere are some utilities that are not included in the Moddable SDK or other platform tooling but can be helpful with some common development tasks. The `--tool` flag allows for installing one of these related tools, which may not be easily done from a typical package manager.\n\n**Supported tools:**\n\n[`fontbm`](https://github.com/vladimirgamalyan/fontbm): BMFont compatible, cross-platform (Linux/macOS/Windows) command line bitmap font generator (FreeType2 based render)\n\n```\nxs-dev setup --tool fontbm\n```\n","url":"/en/features/setup","title":"Setup","description":"xs-dev platform setup","layout":"../../../layouts/MainLayout.astro"},{"content":"\n# Clean up environment changes\n\nRemove all installed git repos and toolchains, unset environment changes. This is all or nothing currently; there's no filter for selecting an individual platform or device tooling.\n\n```\nxs-dev teardown\n```\n","url":"/en/features/teardown","title":"Teardown","description":"Clean up dev environment","layout":"../../../layouts/MainLayout.astro"},{"content":"\n# SDK & Tooling Updates\n\nStay up to date with the latest tooling from Moddable and supported device targets. As with the [`setup`](./setup) command, the current dev environment (Mac or Linux) is the default selected target:\n\n```\nxs-dev update\n```\n\n## Target Branch\n\nThe default behavior of this command for Moddable developer tooling pulls the [latest release tooling](https://github.com/Moddable-OpenSource/moddable/releases) and source code for the associated tagged branch. This provides a known-working state for the SDK and avoids needing to build the tooling on the local machine. \n\nTo override this behavior, use the `--target-branch` flag to select `public`; this fetches the latest commit off that main branch and runs the build to generate the associated tools.\n\n```\nxs-dev setup --target-branch public\n```\n\n_This will only work for the `mac`, `windows`, and `linux` device options, which are the respective defaults for the operating system on which the command is run._\n\n## Device Updates\n\nWhile the `update` command provides the latest Moddable SDK for the dev environment, the `--device` flag selects another platform target SDK to set up. It ensures the Moddable SDK has been installed first.\n\nThe `--device` flag allows for selecting a different target platform:\n\n```\nxs-dev update --device esp32\n```\n\n_There may be some platforms that are supported by the `setup` command but not `update` yet._\n","url":"/en/features/update","title":"Update","description":"Stay up to date with the latest tooling","layout":"../../../layouts/MainLayout.astro"},{"content":"\n**Prepare for embedded JS development**\n\nGetting started on the journey to developing embedded hardware projects with JavaScript assumes some knowledge of various technologies like the command line, text editors, package managers, and [the JavaScript programming language](https://developer.mozilla.org/en-US/docs/Web/javascript).\n\n## Command Line\n\nTutorial content will reference command line utilities and jargon as part of the workflow for developing embedded JS projects. Select your operating system to learn more about this subject:\n\n- [MacOS OR Linux](https://www.freecodecamp.org/news/command-line-for-beginners/)\n- [Windows](https://www.freecodecamp.org/news/command-line-commands-cli-tutorial/)\n\nInline terminal commands will usually be formatting like the following: `echo \"hello world\"`\n\nCode examples will look like the following:\n\n```javascript\ntrace('hello world')\n```\n\n## Text Editors\n\nA local plain text editor is generally required for creating and editing your JavaScript projects. You can download one of the following free applications with either built-in or third-party support for JavaScript:\n\n- [Visual Studio Code](https://code.visualstudio.com/)\n- [Neovim](http://www.sublimetext.com/) / [Vim](https://www.vim.org/)\n- [Sublime Text](http://www.sublimetext.com/)\n\nThese are not the only available editors, so feel free to do your own research and pick what feels right to you!\n\n## NodeJS & Package Manager (optional)\n\nWhile [NodeJS](https://nodejs.org/en/) is not required for [Moddable XS](https://github.com/Moddable-OpenSource/moddable) projects, it is a dependency for installing and using the [`xs-dev` CLI](https://hipsterbrown.github.io/xs-dev/en/introduction/).\n\nNode can be [downloaded directly from the website](https://nodejs.org/en/download/), however using one of the following version managers can help with quickly switching to recommended versions of the tooling in the future:\n\n- [Volta](https://volta.sh/)\n- [fnm](https://github.com/Schniz/fnm)\n- [asdf](https://asdf-vm.com/guide/getting-started.html#_4-install-a-plugin)\n- [rtx](https://github.com/jdxcode/rtx#installation)\n- [`pnpm env`](https://pnpm.io/cli/env)\n\nNode comes with [npm](https://docs.npmjs.com/cli/v8/commands/npm) as the included package manager, but there are other options available if needed:\n\n- [pnpm](https://pnpm.io/installation)\n- [yarn](https://yarnpkg.com/)\n\n### Troubleshooting\n\nIf you encounter an `EACCES` error after setting up NodeJS and attempt to install a package, like the following:\n\n```\nError: EACCES: permission denied, mkdir\n```\n\nCheck out the [npm docs](https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally) to learn about to resolve it: https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally\n\n## Linux Permissions\n\nSetup commands rely on [`ssh-askpass`](https://packages.ubuntu.com/bionic/ssh-askpass) to prompt for permission when installing other tools and dependencies.\n\n## Choose your hardware adventure\n\nHardware is not required to get started with xs-dev, or even to run some code, since there are [simulated devices available with the Moddable SDK](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/tools/tools.md#simulator).\n\nSimulators are fun and everything, but controlling hardware with JavaScript is even better! `xs-dev` supports a few popular hardware platforms through [Moddable](https://github.com/Moddable-OpenSource/moddable):\n\n- [ESP8266](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/devices/esp8266.md)\n- [ESP32](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/devices/esp32.md)\n- [Raspberry Pi Pico](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/devices/pico.md)\n\nEach platform has a variety of features and form factors to support whatever you might dream up. This guide will do its best to provide code and diagrams that match the expectations of your chosen device(s) but cannot promise comprehensive coverage of every piece of hardware in existence.\n\nIf you run into issues or have a question, please [start a discussion in the GitHub repo](https://github.com/HipsterBrown/xs-dev/discussions).\n\nOnce you feel ready, [move on the first step of installing the CLI and the Moddable SDK](/en/guide/01-hello-console).\n","url":"/en/guide/00-prepare","title":"Prerequisites","description":"Prepare for embedded JS development","layout":"../../../layouts/MainLayout.astro"},{"content":"\n**How to set up the basic development environment and run your first program**\n\n## Install the CLI\n\n`xs-dev` can be installed globally using the [NodeJS package manager of your choice](./00-prepare#nodejs-package-manager-optional).\n\n```\nnpm install -g xs-dev\n```\n\n```\npnpm install -g xs-dev\n```\n\n```\nyarn global add xs-dev\n```\n\n## Setup system tooling\n\nAs specified in the [setup documentation](../features/setup), the [Moddable SDK and associated tooling](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/tools/tools.md) is installed using the following command:\n\n```\nxs-dev setup\n```\n\nThis will determine the correct tooling to install based on your operating system.\n\n**[Windows support is currently in beta](https://github.com/HipsterBrown/xs-dev/pull/63)**\n\nOnce this process is done, you should see a success message:\n\n```\nModdable SDK successfully set up! Start a new terminal session and run the \"helloworld example\": xs-dev run --example helloworld\n```\n\nor on Windows, you should see the following:\n\n```\nModdable SDK successfully set up!\nA shortcut to the Moddable Command Prompt has been created at \\xs-dev\\Moddable Command Prompt.lnk.\nYou should always use the Moddable Command Prompt when working with the Moddable SDK.\nThe Moddable Command Prompt will now open for you in a new Window. Please close this Command Prompt and use the Moddable Command Prompt instead.\nAs a next step, try running the \"helloworld example\" in the Moddable Command Prompt: xs-dev run --example helloworld'\n```\n\n## Run the Hello World example\n\nTo start a new terminal session, you can either execute your shell of choice (`bash`/`zsh`/`fish`), create a new terminal window / tab, or start the Moddable Command Prompt on Windows. This will ensure the expected tooling is available in your session [PATH](https://en.wikipedia.org/wiki/PATH_(variable)).\n\nYou can [run any Moddable example included in the SDK](../features/run#moddable-examples). The \"Hello World\" example provides the simplest program to get started and can be run in the [simulator](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/tools/tools.md#simulator):\n\n```\nxs-dev run --example helloworld\n```\n\nThis will start up the debugger and simulator:\n\n![Moddable simulator app and debugger app running on MacOS](/run-hello-world.png)\n\nThis will keep running until interrupted using the `Ctrl+C` keys in the terminal session or both apps are quit.\n\n## Keep exploring!\n\nUse the `--list-examples` flag with the `run` command to search the extensive list of available examples to run in the simulator: `xs-dev run --list-examples`\n\nWhen you're ready to move on, it's time to [create your first project and control some hardware](/en/guide/02-blinky).\n\n## Troubleshooting\n\nWhen attempting to run the Hello World example, if you continually see the following error (even after starting a new terminal session):\n\n```\nModdable tooling required. Run 'xs-dev setup --device <computer os here>' before trying again.\n```\n\nThere may be an issue with the terminal shell or command prompt using the correct [environment configuration](/xs-dev/en/features/setup#overview) for xs-dev.\n\n- [Learn about Terminal profiles on MacOS](https://support.apple.com/guide/terminal/default-startup-terminal-window-profiles-trml5856b1f2/mac)\n- [Learn about shell initialization files and user profiles on Linux](https://www.tecmint.com/understanding-shell-initialization-files-and-user-profiles-linux/)\n- [Learn about Windows Terminal startup settings](https://learn.microsoft.com/en-us/windows/terminal/customize-settings/startup)\n\nOn \"Unix-like\" environments (MacOS, Linux), the `env` command should contain a reference to the `MODDABLE` environment variable:\n\n```\nenv | grep MODDABLE\n```\nThe above command should return something like `MODDABLE=/Users/<username>/.local/share/moddable` to indicate where the Moddable SDK has been installed in the filesystem.\n\nRunning [`xs-dev doctor` command](/en/features/doctor) will display relevant info about the development environment, which can be helpful for debugging and sharing in support issues:\n\n```\nxs-dev environment info:\n  CLI Version                0.19.3\n  OS                         Darwin\n  Arch                       arm64\n  NodeJS Version             v16.14.0 (/path/to/node)\n  Python Version             3.10.9 (/path/to/python)\n  Moddable SDK Version       3.5.0 (/path/to/moddable)\n  Supported target devices   mac\n\nIf this is related to an error when using the CLI, please create an issue at \"https://github.com/hipsterbrown/xs-dev/issues/new\" with the above info.\n```\n","url":"/en/guide/01-hello-console","title":"Hello Console","description":"How to set up the basic development environment and run your first program","layout":"../../../layouts/MainLayout.astro"},{"content":"\n**Initialize a new project and start to interact with some hardware!**\n\n## Project creation\n\nThe [`init` command](/en/features/init) will create a new directory with the name provided and saffold the starting files based on a template or example:\n\n```\nxs-dev init guiding-light\n```\n\nThe above command should result in the following output:\n\n```\nGenerating Moddable project: guiding-light\nRun the project using: cd guiding-light && xs-dev run\n```\n\nThe `guiding-light` directory should contain `main.js` and `manifest.json` files. `main.js` contains that was run from the [Hello Console example](/en/guide/02-hello-console):\n\n```javascript\ndebugger;\n\nlet message = \"Hello, world - sample\";\ntrace(message);\n```\n\nThe first line is a [debugger statement](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger) for setting a breakpoint in [xsbug](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/xs/xsbug.md).\nThe third and fourth lines save a string to a variable and log it to the xsbug console using the global [`trace` function](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/xs/xsbug.md#colorizing-consolelog-with-trace).\n\nThe [Moddable docs](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/tools/manifest.md) describe the `manifest.json` as follows:\n\n> A manifest is a JSON file that describes the modules and resources necessary to build a Moddable app.\n\nThe initialized `manifest.json` in the `guiding-light` project should look like this:\n\n```json\n{\n  \"include\": [\n    \"$(MODDABLE)/examples/manifest_base.json\"\n  ],\n  \"modules\": {\n    \"*\": \"./main\"\n  }\n}\n```\n\nThe [`include` field](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/tools/manifest.md#include) contains references to other manifests to provide quick reuse of common configuration found in the Moddable SDK, examples, and your own projects. The `manifest_base.json` includes basic platform support for all available platforms and some initial modules for time, timers, and instrumentation.\n\nThe [`modules` field](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/tools/manifest.md#modules) should contain a mapping of every module to include in the build. The `*` key means the module (or list of modules) can be imported and referenced by their file name. A custom key can be used as an alias to reference when importing the assigned module.\n\nExecuting `xs-dev run` should provide the same experience as the [Hello Console guide](/en/guide/01-hello-console).\n\n_Quick tip: check out all the available simulators by using the [`--list-devices` flag](/en/features/run#select-a-device-target) with the `run` command and typing \"simulator\" to filter the list._\n\n## Down to the metal\n\nAt this point, we have our [chosen hardware in hand](/en/guide/00-prepare#choose-your-hardware-adventure) and need to set up the dev environment to start running code on the device. \n\nJust like the [previous step](/en/guide/01-hello-console#setup-system-tooling), the `setup` command will automate the installation and building of tooling required for the target device. The `--list-devices` flag will provide an interactive list of supported device platforms:\n\n```\n❯ xs-dev setup --list-devices\n? Here are the available target devices: …\nesp8266\nesp32\npico\nwasm\nmac\n```\n\n_You may see different options depending on what operating system or version of xs-dev you are using._\n\nOnce this process is done, you should see a success message (where `<device>` is the selected target device):\n\n```\nSuccessfully set up <device> platform support for Moddable!\nTest out the setup by starting a new terminal session, plugging in your device, and running: xs-dev run --example helloworld --device=<device>\nIf there is trouble finding the correct port, pass the \"--port\" flag to the above command with the path to the /dev.cu.* that matches your device.\n```\n\nRunning our project on the selected device (which should be connected to the computer somehow, presumable over USB) is the same command as before with the additional `--device` flag to pass in the target device platform:\n\n```\nxs-dev run --device <device>\n```\n\nThis will take some time to compile and send the code over to the device. When it has succeeded, the debugger will open like before but now it is tracing the logs coming from the hardware!\n\n👏 Give yourself a round of applause! You have now run JavaScript on an embedded device! 🎉\n\n## Hello blinky\n\nNow that we know we can run code on our device, it is time to shed a little light on hardware control. We will use the [ECMA-419 standard APIs](https://419.ecma-international.org/) to perform this task. To access those APIs we need to include them in our project:\n\n```\nxs-dev include io\n```\n\nThe [`include` command](/en/features/include) updates the `manifest.json` to (you guessed it) _include_ the required module(s) from the Moddable SDK. In this case, the `io` module provides the complete set of ECMA-419 APIs for the supported device platform. The `manifest.json` should look like this:\n\n```json\n{\n  \"include\": [\n    \"$(MODDABLE)/examples/manifest_base.json\",\n    \"$(MODDABLE)/modules/io/manifest.json\"\n  ],\n  \"modules\": {\n    \"*\": \"./main\"\n  }\n}\n```\n\nWith that configured, the `main.js` file can be updated with the following code:\n\n```javascript\nconst Digital = device.io.Digital;\nconst led = new Digital({\n   pin: device.pin.led,\n   mode: Digital.Output,\n});\nled.write(1);\n\nlet state = 0;\nSystem.setInterval(() => {\n\tled.write(state);\n\tif (state === 0) {\n        state = 1;\n    } else {\n        state = 0;\n    }\n}, 200);\n```\n\nUsing the [global `device` variable](https://419.ecma-international.org/#-16-host-provider-instance-global-variable) provided by the `io` module, we can access the [`Digital` IO class](https://419.ecma-international.org/#-10-io-classes-digital) for controlling the digital output to an LED. In this example, the `Digital` class is instantiated with the `pin` property set to the built-in led as [defined on the global `device`](https://419.ecma-international.org/#-16-host-provider-instance-pin-name-property) and the `mode` set to the [`Digital.Output`](https://419.ecma-international.org/#-10-io-classes-digital) static property found on the class. With that Digital instance variable called `led`, the [`write` method](https://419.ecma-international.org/#-9-io-class-pattern-write-method) is called with a value of `1` to send power to the LED.\n\n```javascript\nconst Digital = device.io.Digital;\nconst led = new Digital({\n   pin: device.pin.led,\n   mode: Digital.Output,\n});\nled.write(1);\n```\n\nTo make the light blink, the next value to be written is stored as the `state` variable. The global [`System` class](https://github.com/Moddable-OpenSource/moddable/blob/public/modules/io/system/system.js) provides the well-known [`setInterval`](https://developer.mozilla.org/en-US/docs/Web/API/setInterval) function that is found in other JavaScript runtimes like the Web and Node.js. Every 200 milliseconds, the `state` is written to the LED before being updated to the opposite value.\n\n```javascript\nlet state = 0;\nSystem.setInterval(() => {\n\tled.write(state);\n\tif (state === 0) {\n        state = 1;\n    } else {\n        state = 0;\n    }\n}, 200);\n```\n\nThe project can be run using the same command as before: `xs-dev run --device <device>`. If it succeeds, you should see a blinking LED somewhere on your device! ✨\n\n## Keep exploring!\n\nTried adding some `trace` calls to log the state to the debugger or updating the timer code to send a message in [Morse code](https://ledask.com/morse-code-lights/).\n\n_Coming soon: react to digital input by pressing some buttons_\n\n## Troubleshooting\n\nIf you're working with a device that doesn't have an on-board LED or encounter an error while trying to use the `device.pin.led` value, the [pin specifier](https://419.ecma-international.org/#-9-io-class-pattern-pin-specifier) can be set to a custom value based on the device datasheet or pinout diagram, like [this one for the Pico](https://pico.pinout.xyz/). The pin value can match the on-board LED or [an external LED](https://www.sparkfun.com/products/12062) connected to a GPIO, most likely by using a [breadboard](https://learn.sparkfun.com/tutorials/how-to-use-a-breadboard#building-your-first-breadboard-circuit).\n","url":"/en/guide/02-blinky","title":"Guiding Light","description":"Initialize a new project and start to interact with some hardware!","layout":"../../../layouts/MainLayout.astro"},{"content":"\n# **Welcome to xs-dev!**\n\nCLI for automating the setup and usage of [Moddable XS tools](https://github.com/Moddable-OpenSource/moddable/blob/public/documentation/Moddable%20SDK%20-%20Getting%20Started.md)\n\nThe Moddable SDK and associated dev board tooling is incredibly empowering for embedded JS hardware development, however the set up process can be tedious to follow when getting started. This project aims to streamline the installation and environment configuration requirements across platforms in just a few commands.\n\n**This project is a work in progress and currently pre-1.0, so there may be breaking changes.**\n\n**Features:**\n\n- [X] [Moddable SDK setup](/en/features/setup)\n- [X] [SDK updates](/en/features/update)\n- [X] [Teardown](/en/features/teardown)\n- [X] [Device discovery](/en/features/scan)\n- [X] [Project creation](/en/features/init)\n- [X] [Run a project or example](/en/features/run)\n- [X] [SDK module management](/en/features/include)\n- [X] [Get dev environment info](/en/features/doctor)\n- [ ] Third-party dependency management ([coming soon](https://github.com/HipsterBrown/xs-dev/issues/49))\n\n**Platform support:**\n\n- [X] Mac\n- [-] Windows (currently in beta)\n- [X] Linux\n\n**Check out the getting started video from the Moddable team**\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/1gxFWBnDl18\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n\n**Read through the starter guide for a detailed walkthrough**\n\n0. [Prepare for embedded JS development](/en/guide/00-prepare)\n1. [Hello Console](/en/guide/01-hello-console)\n2. [Guiding light](/en/guide/02-blinky)\n\n## Requirements\n\n[Node.js >= v16](https://nodejs.org/en/)\n\n_If you've never installed Node.js before, check out the [getting started guide for xs-dev](/xs-dev/en/guide/00-prepare#nodejs-package-manager-optional)._\n\n**On Linux:**\n\nSetup commands rely on [`ssh-askpass`](https://packages.ubuntu.com/bionic/ssh-askpass) to prompt for permission when installing other tools and dependencies.\n\n## Installation\n\nInstall the package globally from `npm`:\n\n```\nnpm install -g xs-dev\n```\n\n```\npnpm install -g xs-dev\n```\n\n```\nyarn global add xs-dev\n```\n\n## Update to latest release\n\n```\nnpm update -g xs-dev\n```\n\n```\npnpm update -g xs-dev\n```\n\n```\nyarn global upgrade xs-dev\n```\n\n","url":"/en/introduction","title":"Introduction","description":"xs-dev intro","layout":"../../layouts/MainLayout.astro"}]